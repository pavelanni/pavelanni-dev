<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Pavel Anni</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Pavel Anni</description>
    <generator>Hugo -- 0.136.5</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Dec 2024 19:44:07 -0500</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Geekhouse</title>
      <link>http://localhost:1313/projects/geekhouse/</link>
      <pubDate>Mon, 23 Dec 2024 19:44:07 -0500</pubDate>
      <guid>http://localhost:1313/projects/geekhouse/</guid>
      <description>How a toy project helped me to learn more about IoT, REST API and large language models (LLM)</description>
      <content:encoded><![CDATA[<h2 id="previously">Previously</h2>
<p>It all started several years ago when I thought &ldquo;Can I use Alexa to manage physical devices?&rdquo;
I created a simple demo project to show it to my amateur radio friends.
You would say, &ldquo;Alexa, turn my antenna 90 degrees,&rdquo; and my model antenna would magically turn.
It was a fun weekend project that used a Raspberry Pi, a stepper motor, and a miniature model antenna.
I published it on YouTube, if you&rsquo;re curious.</p>
<p><img alt="Alexa Antenna application" loading="lazy" src="/projects/geekhouse/alexa_antenna.png"></p>
<h2 id="smart-dollhouse">Smart dollhouse</h2>
<p>The Alexa experiment was great but had some issues.
With Alexa, you should be very precise with your phrases.
In my application, Alexa expected you to say, &ldquo;Alexa, turn my antenna XX degrees,&rdquo; and only this exact phrase would work.
With the growing availability of large language models (LLM) I started thinking about using them to manage motors, devices, and sensors.</p>
<p>&ldquo;What if I get a dollhouse,&rdquo; I thought, &ldquo;and add a bunch of sensors and a microcontroller and write a REST API server for them?&rdquo;
Then, I&rsquo;ll ask an LLM to convert human language to REST API requests and send them to the server.
Also, I wanted something that looks realistic and not just a bunch of sensors scattered on my desk.</p>
<p>Luckily, I found <em>exactly</em> what I needed on Amazon: a wooden house with many of sensors attached to it and a microcontroller.
I have to praise the great quality of the kit I bought from Keyestudio: it was very easy to build and attach the sensors, and the
software worked on the first run!
If you tried similar kits before, you should know it&rsquo;s not very common.</p>
<p><img alt="Keyestudio house" loading="lazy" src="/projects/geekhouse/keyestudio_house_esp32.png"></p>
<p>The kit included a simple Arduino controller with a sample program that implemented some business logic: for example,
when there was a signal on the rain sensor on the roof, the servo motor would close the window.</p>
<p>It worked fine, but I needed a server to respond to remote requests.</p>
<h2 id="iot-server">IoT server</h2>
<p>I decided to switch to Raspberry Pi Pico W and MicroPython.
The &ldquo;W&rdquo; version of Pico gave me the connectivity I needed, and I was going to use MicroPython to implement a simple REST API server.</p>
<h3 id="using-ai-helpers">Using AI helpers</h3>
<p>As it&rsquo;s becoming more common these days, I asked Claude.ai to help me with this project.</p>
<blockquote>
<p>I want to write a program in MicroPython for Raspberry Pi Pico. It should run a web server connected to WiFi.
The web server should accept REST requests and perform actions on the Pico, such as: getting information from sensors, turning LEDs on and off, turning motors (servos and steppers) on and off.
Please help me create an API for this application.</p>
</blockquote>
<p>Claude answered with a list of <code>curl</code> commands that can be used against our planned API.
I liked this approach: you design the expected user experience first (in our case, it was REST API) and then start implementing it.</p>
<p>It created a very simple web server without using any frameworks at all, just with sockets.
I asked if we can use a framework like Flask, and Claude told me that with MicroPython it&rsquo;s more common to use Microdot
because it is lighter on resources.
I learned that Microdot is being developed by Miguel Grinberg, the author of one of the most popular books about Flask.
That was a good recommendation and I asked Claude to re-write the web server with Microdot.</p>
<p>After that was done, I tested the server on my Pico and it worked just fine!
But I had a further idea, and I asked:</p>
<blockquote>
<p>Please help me write the GET function for Microdot that will return a list of sensors when called as <code>/sensors</code> and the sensor&rsquo;s value when called with /sensors/id.
I think this should help with discoverability.</p>
</blockquote>
<p>And here was another discovery!
Claude told me about the concept with a strange name &ldquo;HATEOAS,&rdquo; which stands for Hypermedia as the Engine of Application State.
It explained the idea behind it, gave examples, and finally, wrote the server code that would respond to routes like <code>/sensors</code> or <code>/leds</code> with
the information about sensors and LEDs locations (roof, garden, door), parameters (LED&rsquo;s color, sensor&rsquo;s calibration),
and, most importantly, the links I should use to work with them.</p>
<p>That was very close to what I needed.</p>
<h2 id="using-llm-to-generate-rest-api-calls">Using LLM to generate REST API calls</h2>
<p>Now, thanks to Claude&rsquo;s help, I had a server that would respond to requests like <code>curl http://server/leds</code> with the following JSON:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;_links&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;filter_by_color&#34;</span>: {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;href&#34;</span>: <span style="color:#e6db74">&#34;/leds/filter?color={color}&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;templated&#34;</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;self&#34;</span>: {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;href&#34;</span>: <span style="color:#e6db74">&#34;/leds&#34;</span>
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;filter_by_location&#34;</span>: {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;href&#34;</span>: <span style="color:#e6db74">&#34;/leds/filter?location={location}&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;templated&#34;</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;data&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;1&#34;</span>: {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;color&#34;</span>: <span style="color:#e6db74">&#34;yellow&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;location&#34;</span>: <span style="color:#e6db74">&#34;roof&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;state&#34;</span>: <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;_links&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;on&#34;</span>: {
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;href&#34;</span>: <span style="color:#e6db74">&#34;/leds/1/on&#34;</span>
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;self&#34;</span>: {
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;href&#34;</span>: <span style="color:#e6db74">&#34;/leds/1&#34;</span>
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;off&#34;</span>: {
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;href&#34;</span>: <span style="color:#e6db74">&#34;/leds/1/off&#34;</span>
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;toggle&#34;</span>: {
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;href&#34;</span>: <span style="color:#e6db74">&#34;/leds/1/toggle&#34;</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;2&#34;</span>: {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;color&#34;</span>: <span style="color:#e6db74">&#34;white&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;location&#34;</span>: <span style="color:#e6db74">&#34;garden&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;state&#34;</span>: <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;_links&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;on&#34;</span>: {
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;href&#34;</span>: <span style="color:#e6db74">&#34;/leds/2/on&#34;</span>
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;self&#34;</span>: {
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;href&#34;</span>: <span style="color:#e6db74">&#34;/leds/2&#34;</span>
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;off&#34;</span>: {
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;href&#34;</span>: <span style="color:#e6db74">&#34;/leds/2/off&#34;</span>
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;toggle&#34;</span>: {
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;href&#34;</span>: <span style="color:#e6db74">&#34;/leds/2/toggle&#34;</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>What if I get similar JSONs from the other routes, such as <code>/sensors</code> and <code>/motors</code>, send them to an LLM, and ask it to convert human requests to <code>curl</code> commands?
Then, I can send those commands to the server via the <code>requests</code> Python library and work with the devices!</p>
<p>The next step was to write a simple Python script that would get the initial links from the root (<code>/</code>) route of the server and explore all links to get the same JSONs from them.</p>
<p>After the script collected the API description of the server this way, I created a system prompt that included the whole JSON with all the links from the server and added the request:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>You are an IoT API assistant.
</span></span><span style="display:flex;"><span>Convert user commands to curl commands for the IoT server.
</span></span><span style="display:flex;"><span>API structure: {json.dumps(self.api_structure, indent=2)}
</span></span><span style="display:flex;"><span>Server URL: {self.server_url}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Respond only with the curl command, no explanations.
</span></span></code></pre></div><p>Then I created a simple dialog that would get the command from the user in human language, attach it to the prompt, and send it to the LLM.</p>
<p>For this application, I used Haiku-3.5 from Anthropic because it is faster and cheaper than more complex models.</p>
<h2 id="translate-json-responses-to-human-language">Translate JSON responses to human language</h2>
<p>Now the system has started working.
I would send a message like, &ldquo;Turn the yellow LED on,&rdquo; and it turned on.
Or, &ldquo;Turn the garden LED on,&rdquo; and the white LED in the garden would turn on.
I could ask in normal language, &ldquo;What&rsquo;s the light conditions on the roof?&rdquo; and it responded with a JSON that included a lot of information:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;_links&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;config&#34;</span>: {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;href&#34;</span>: <span style="color:#e6db74">&#34;/sensors/2/config&#34;</span>
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;self&#34;</span>: {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;href&#34;</span>: <span style="color:#e6db74">&#34;/sensors/2/value&#34;</span>
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;all_sensors&#34;</span>: {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;href&#34;</span>: <span style="color:#e6db74">&#34;/sensors&#34;</span>
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;sensor&#34;</span>: {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;href&#34;</span>: <span style="color:#e6db74">&#34;/sensors/2&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;data&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;unit&#34;</span>: <span style="color:#e6db74">&#34;lux&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;light&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;calibrated_value&#34;</span>: <span style="color:#ae81ff">4114.6</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;location&#34;</span>: <span style="color:#e6db74">&#34;roof&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;2&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;raw_value&#34;</span>: <span style="color:#ae81ff">41146</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>That was good, but I wanted more reasonable human language instead of JSON!
LLM was to the rescue again!
Here is another prompt for Haiku:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Convert this IoT API JSON response to concise human language, focusing on the most important information.
</span></span><span style="display:flex;"><span>Don&#39;t print &#39;Here is the concise summary&#39; or other explanations; print just the content:
</span></span></code></pre></div><p>And now the answers from my server looked like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Light sensor #2 located on the roof is measuring 4,109.8 lux, indicating bright illumination conditions.
</span></span></code></pre></div><h2 id="first-public-demo">First public demo</h2>
<p>Recently, I went to the local Python meetup in Atlanta.
I was going to give a presentation about this project and demonstrate it.
Needless to say, I was nervous.</p>
<p>I started a hotspot on my cell phone, connected my laptop to it, and started the Pico.
It indicated that it had connected to the hotspot and got an IP address.
Now I had to change my dialogue program to point to that address.</p>
<p>The dialogue began:</p>
<pre tabindex="0"><code class="language-none" data-lang="none">IoT Controller started. Type &#39;quit&#39; to exit.

&gt;&gt;&gt; turn the yellow led on

LED 1 is currently on, colored yellow, and located on the roof.

&gt;&gt;&gt; turn the motor on

Motor 1 (DC type) is currently ON and located on the roof.

&gt;&gt;&gt; turn the motor off

Motor #1, a DC motor located on the roof, is currently turned off.
</code></pre><p>So far, so good.
The public loved it when the propeller started spinning and gave me a round of applause.</p>
<p>I switched my keyboard to Cyrillic and typed this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>&gt;&gt;&gt; выключи желтый led
</span></span></code></pre></div><p>&ldquo;Wow, is it Russian?&rdquo; I heard the murmur in the audience.</p>
<p>And magic happened. The LED went off, and I got this message:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>LED 1 located on the roof is yellow and currently off (state 0).
</span></span></code></pre></div><p>I asked the meetup organizer, &ldquo;Pablo, can you tell it in Spanish to turn the LED on?&rdquo;</p>
<p>Pablo took the keyboard and typed:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>&gt;&gt;&gt; Por favor prender el LED amarillo
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>LED 1 is currently on (state 1), colored yellow, and located on the roof.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&gt;&gt;&gt; Apaga la maldita led amarilla
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>LED 1 is currently off, located on the roof, and colored yellow.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&gt;&gt;&gt;
</span></span></code></pre></div><p>&ldquo;Wow!&rdquo; said the audience.</p>
<p>I explained, &ldquo;This magic is done purely by the LLM. I didn&rsquo;t do anything in the code.
It understands many languages and translates between them and REST and JSON easily.
Note that when I spoke to it in Russian, I used the English word &lsquo;LED&rsquo;, and it understood me perfectly.&rdquo;</p>
<h2 id="lessons-learned">Lessons Learned</h2>
<p>This project turned out to be an unexpected learning journey.
I started with a simple idea of controlling a dollhouse but ended up learning:</p>
<ul>
<li>MicroPython and its differences from regular Python</li>
<li>Microdot - a lightweight web framework perfect for microcontrollers</li>
<li>HATEOAS - a REST API design principle with a name that sounds like a sneeze</li>
<li>The incredible versatility of LLMs in handling natural language processing</li>
</ul>
<p>Most importantly, I learned that AI assistants like Claude can be excellent coding partners.
They not only help with code but also introduce you to best practices and concepts you might not have discovered otherwise.</p>
<h2 id="future-plans">Future plans</h2>
<p>Of course, I started looking for ways to expand the project.
And, of course, I found this: a huge 42-in-1 kit from Keyestudio with a lot of sensors and actuators.</p>
<p>Wouldn&rsquo;t it be cool to say something and have it displayed on the LCD screen?
Gas sensors, accelerometers, buzzers, and motors are waiting for me to connect them.</p>
<h2 id="getting-more-serious">Getting more serious</h2>
<p>Of course, it&rsquo;s just a toy project created for learning.
If you want to use IoT in your real home, of course, you should take a look at <a href="https://www.home-assistant.io/">Home Assistant</a>.
That&rsquo;s what I did, thinking, &ldquo;Can I apply the same approach to creating Home Assistant&rsquo;s API requests?&rdquo;
Needless to say, the project has already implemented the <a href="https://developers.home-assistant.io/docs/core/llm/">API for LLMs</a>
&ldquo;Great minds think alike,&rdquo; I said to myself proudly. 😉</p>
<h2 id="project-code">Project code</h2>
<p>If you&rsquo;re interested in building your own multilingual smart dollhouse (or just want to see how it all works), check out the project on GitHub: <a href="https://github.com/pavelanni/geekhouse">Geekhouse Repository</a>. Feel free to contribute, ask questions, or share your own IoT adventures.</p>
<p>Try to use any language you know and see if the LLM can translate it into REST API calls!
Try other LLMs, try a local LLM running in your homelab.
Most likely, using a local LLM will make turning LEDs on and off faster.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Time circuits</title>
      <link>http://localhost:1313/projects/time_circuits/</link>
      <pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/time_circuits/</guid>
      <description>A TinyGo project implementing Time Circuits (for time travel, you know)</description>
      <content:encoded><![CDATA[<p>You know how it all started? I was browsing Amazon one day (as you do) and came across this set of color 7-segment LED displays.</p>
<p><img alt="Seven-segment LEDs" loading="lazy" src="/projects/time_circuits/seven-segment-leds.webp"></p>
<p>Instantly, I thought of the Time Circuits display from <em>Back to the Future</em>.</p>
<p>This project combines two of my favorite things — tech tinkering and fun. I used two Raspberry Pi Picos, some 7-segment LED displays, rotary encoders, and (of course) Go! And before you ask — yes, it does something cool, and no, I haven’t hit 88 mph with it just yet.</p>
<p>This isn’t my first attempt at making this thing. I originally started with an Arduino, writing the project in C++. I even got as far as setting the destination time before life happened (probably work). It stayed unfinished for years.</p>
<p><img alt="Version 1.0" loading="lazy" src="/projects/time_circuits/version1.webp">
Time Circuits v1.0 (Arduino)</p>
<p>Version 2.0, though? That’s where things got interesting. I picked up TinyGo — a Go compiler for microcontrollers — and decided it was the perfect excuse to learn both TinyGo and Go while having fun. TinyGo works like a charm on Raspberry Pi Pico, so that became my hardware of choice.</p>
<p><img alt="Version 2.0" loading="lazy" src="/projects/time_circuits/version2.webp">
Time Curcuits v2.0 (TinyGo and Raspberry Pi Pico)</p>
<h2 id="the-hardware">The Hardware</h2>
<p>Here’s the gear I used:</p>
<ul>
<li>Two <strong>Raspberry Pi Picos</strong></li>
<li>4-digit <strong>7-segment LED</strong> displays with the TM1637 chip</li>
<li><strong>Rotary encoders</strong> for setting the time (way more satisfying than buttons)</li>
<li><strong>DFPlayer Mini</strong> to play sound effects. Because what’s a time-travel toy without some audio drama?</li>
</ul>
<p>The plan was simple: one Pico would set the “destination time,” and the other would handle the “present time” and “last time departed.” When you press a button imitating the actual time travel, the “destination time” becomes your “present time,” and the fun begins. Sounds cool, right?</p>
<h2 id="why-tinygo">Why TinyGo?</h2>
<p>Let’s be honest: when working with microcontrollers, the usual suspects are Arduino, MicroPython, or maybe CircuitPython. But with TinyGo, I got to work in Go — one of my favorite languages. It just made everything more enjoyable (and less tedious).</p>
<p>Here’s why TinyGo rocks:</p>
<ul>
<li><strong>Goroutines</strong>: No more messing around with loops and managing every state yourself. With goroutines, the heavy lifting is done.</li>
<li><strong>Channels</strong>: These made it super easy to pass messages around without worrying about blocking the main thread. (Looking at you, Arduino.)</li>
</ul>
<h2 id="how-it-all-works">How it all works</h2>
<p>This setup has two brains (aka Raspberry Pi Picos) that talk to each other via UART. Here’s a rough idea of what’s going on:</p>
<ol>
<li>
<p>Left Pico: You set the “destination time” using rotary encoders and 7-segment displays.</p>
</li>
<li>
<p>Right Pico: It handles the “present time” and “last time departed” and then updates the times when you hit the button to start the journey.</p>
</li>
</ol>
<p>When you press the “time travel” button, the destination time is sent from the left Pico to the right Pico as an RFC3339 string (fancy, huh?). Then, the present time becomes the new “last time departed” — you know, just in case you want to go back to the exact moment you left.</p>
<p><img alt="Hardware diagram" loading="lazy" src="/projects/time_circuits/breadboard.webp">
Hardware connections</p>
<h2 id="software-shenanigans">Software Shenanigans</h2>
<p>I kept the code simple but flexible. I used goroutines to handle multiple tasks at once — like updating the display while you’re setting the time — and channels to manage button presses and other events without creating a tangled mess of code.</p>
<p>Here’s the basic rundown:</p>
<ul>
<li>You turn the rotary encoder to set the year, month, and day for the Destination time.</li>
<li>The left Pico sends that data over UART to the right Pico.</li>
<li>When you press the time-travel button, the current time is saved in the “last departed” time, and the time set as the destination becomes your present time.</li>
<li>The present time starts ticking as your typical wall clock.</li>
</ul>
<h2 id="extra-fun-stuff-sound-and-memory">Extra fun stuff: sound and memory</h2>
<p>Because time travel needs sound effects (obviously), I hooked up a DFPlayer Mini. It plays MP3s from an SD card, and the Picos send the player commands over UART.</p>
<p>Oh, and the toy remembers your settings. Every second, the times are saved to flash memory. When you power it back on, the Picos pick up right where they left off. Handy, right?</p>
<p><img alt="DFPlayer Mini" loading="lazy" src="/projects/time_circuits/dfplayer.webp">
DFPlayer Mini</p>
<h2 id="lessons-i-didnt-expect-to-learn">Lessons I didn’t expect to learn</h2>
<p>This project was a great learning experience but it wasn’t all smooth sailing. Here are some of the surprises I encountered:</p>
<ol>
<li>
<p><strong>Goroutines</strong>: In TinyGo, goroutines will keep going until they hit a blocking operation (like I/O). I had to add tiny sleep calls here and there to make everything work smoothly.</p>
</li>
<li>
<p><strong>Error handling matters</strong>: Error handling is always important, but it’s really important here. Things will go haywire if an extra character sneaks into your UART transmission. You must detect it and avoid just hanging up the whole time machine.</p>
</li>
<li>
<p><strong>Rotary encoders are not so simple</strong>: I learned about Gray code (have you heard about it?) to implement the rotary encoders, which saved me from a world of trouble. In short, it’s an alternative binary code where two consecutive numbers differ only by one bit. It turns out to be very useful in error-prone environments like electronic circuits. Read more: <a href="https://en.wikipedia.org/wiki/Gray_code">https://en.wikipedia.org/wiki/Gray_code</a>.</p>
</li>
<li>
<p><strong>Debouncing switches</strong>: That’s a whole other world of engineering. When you pressed a button, did it send just one pulse or more? If you’re going down that rabbit hole, here are some excellent reads on switch debouncing: <a href="https://www.eejournal.com/article/ultimate-guide-to-switch-debounce-part-1/">https://www.eejournal.com/article/ultimate-guide-to-switch-debounce-part-1/</a> and <a href="http://www.ganssle.com/debouncing.htm">http://www.ganssle.com/debouncing.htm</a>.</p>
</li>
</ol>
<h2 id="whats-next">What’s next?</h2>
<p>There are so many ways I can build on this project. For starters, I could add a GPS and a speedometer to really nail that 88 mph speed limit and make that trigger the time-travel event instead of a lousy button. Or I could turn this into a Pomodoro timer, an alarm clock, or a chess clock — time-travel toys for all occasions.</p>
<p>Or, who knows? Maybe I’ll create a DIY kit so you can build your own time-travel toy at home.</p>
<h2 id="want-to-try-tinygo">Want to try TinyGo?</h2>
<p>If you’re curious about TinyGo and want to dip your toes in, here’s how to start:</p>
<ol>
<li>Get a Raspberry Pi Pico Starter Kit — it usually includes sensors, motors, LEDs, and more.</li>
<li>Clone the TinyGo repo: <a href="https://github.com/tinygo-org/tinygo">https://github.com/tinygo-org/tinygo</a></li>
<li>Follow the steps here: <a href="https://tinygo.org/getting-started/">https://tinygo.org/getting-started/</a></li>
</ol>
<p>Trust me, it’s a fun way to learn Go, and you’ll get something you can actually hold and show off to your friends.</p>
<p>Please let me know if you need more details about this project. Or if you have ideas about improving it — I’ll be happy to continue working on it!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Thoughts on the Metric System: An Immigrant’s Perspective</title>
      <link>http://localhost:1313/texts/unit_systems/</link>
      <pubDate>Thu, 08 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/texts/unit_systems/</guid>
      <description>&lt;p&gt;I’ve long intended to write about the comparison between the metric and American measurement systems. It’s a topic that periodically resurfaces in American discourse, often sparking passionate debates about tradition versus global standardization.&lt;/p&gt;
&lt;p&gt;It’s fascinating to reflect on how my own attitude towards this debate has evolved. When I first arrived in America, I had to adapt to these unfamiliar measurements, and I initially resisted. “What’s with all these illogical units?” I thought. It wasn’t even the individual measures that bothered me most — after all, what’s inherently wrong with an inch, and how is a centimeter radically better? No, it was the seeming lack of logic in the system as a whole that irked me. Why are there 12 inches in a foot but three feet in a yard? And then 16 ounces in a pound? It all seemed arbitrary and inexplicable.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I’ve long intended to write about the comparison between the metric and American measurement systems. It’s a topic that periodically resurfaces in American discourse, often sparking passionate debates about tradition versus global standardization.</p>
<p>It’s fascinating to reflect on how my own attitude towards this debate has evolved. When I first arrived in America, I had to adapt to these unfamiliar measurements, and I initially resisted. “What’s with all these illogical units?” I thought. It wasn’t even the individual measures that bothered me most — after all, what’s inherently wrong with an inch, and how is a centimeter radically better? No, it was the seeming lack of logic in the system as a whole that irked me. Why are there 12 inches in a foot but three feet in a yard? And then 16 ounces in a pound? It all seemed arbitrary and inexplicable.</p>
<p>And don’t get me started on the obsession with fractions — all those sixteenths and thirty-seconds, it’s maddening! I remember a real-life problem I encountered at the post office: I needed to choose a box for a package. Two boxes cost the same, but their sizes were different: one was 11&quot; x 8–1/2&quot; x 5–1/2&quot;, and the other was 11–7/8&quot; x 3–3/8&quot; x 13–5/8&quot;. The question was: which one has a larger volume? Try calculating that in your head! I began to wonder if American schoolchildren were taught some secret techniques for multiplying fractions, which were unknown to us decimal users. Spoiler alert: they aren’t.</p>
<p>Then there’s Fahrenheit! In Celsius, it seems so straightforward: zero is when water freezes, and 100 is when it boils. But Fahrenheit? The zero point seems arbitrary (it was actually the coldest temperature Fahrenheit could achieve in his laboratory, about -18°C). The distance from zero to the water’s freezing point is divided into 32 degrees. Then, he set the boiling point of water at 212 degrees because the 180-degree span between freezing and boiling is conveniently divisible by many fractions. Again, with the non-decimal fractions!</p>
<p>As time passed, however, my perspective began to shift. One summer, I dove into various woodworking projects — building flower beds, decking, etc. Suddenly, I realized it felt natural to think about lumber in feet and inches. The width in inches is expressed in single-digit numbers: boards 4, 6, or 8 inches wide are standard, occasionally 10 inches. Lengths of 6 or 8 feet are also convenient, single-digit numbers. Using meters and centimeters would have been far more complicated. I surprised myself with this realization.</p>
<p>The same goes for bolts and nuts. Inch and half-inch bolts make sense, but what about the tiny ones? Surely we don’t resort to thirty-seconds of an inch? It turns out we don’t need to. Small bolts are simply numbered: #2, #4, #6, up to #12. After that, it’s a quarter-inch and up. Sounds crazy, right? But once you get used to it, it’s not so bad. You learn to visualize what a #6 bolt looks like — just a tad smaller than #8. It becomes second nature.</p>
<p>I had another epiphany during a trip to Canada. I’d always claimed that miles bothered me least of all American measurements — the speedometer shows miles, and road signs display distances in miles. You look, you calculate, and you’re done. But in Canada, I discovered that I wasn’t calculating at all — I had developed an intuitive feel for miles. I’d see a road sign saying “20 km ahead” and suddenly arrive at my destination, thinking, “That was quick!” I realized I had been estimating distances in miles without even thinking about it.</p>
<p>The issue of fractions deserves special attention. When comparing metric and American systems, we often conflate two distinct aspects: the units of measurement themselves (length, weight, etc.) and how these units are subdivided. The metric system uses decimal division throughout. Convenient, right? There are 100 centimeters in a meter and 1000 grams in a kilogram. Converting between units is a breeze. The American system, however, is built on halves: halves, quarters, eighths, sixteenths, and so on. At first glance — through our decimal-tinted lenses — it seems horribly inconvenient. Adding and subtracting become cumbersome: what’s three-quarters minus seven thirty-seconds? You need to find a common denominator, and… ugh. Multiplication is even worse.</p>
<p>BUT — and this is a big but — it’s actually quite practical for everyday use. Think about it: even we “decimal people,” when we see 0.5, think “half,” and when we see 0.25, we think “quarter,” right? We don’t mentally divide the whole into 10 parts and take five of them. We just take half. For daily life, simple fractions often feel more intuitive than decimals. For calculations, decimals win hands down, but for practical applications, fractions have their merits.</p>
<p>Or do they? Let’s take another look at the fractions common in the American system: halves, quarters, eighths, sixteenths… Ring any bells? It’s essentially a binary system beloved by computers and programmers alike! Those in the know understand the computational gymnastics required for a computer to convert binary numbers to the decimal system we humans prefer.</p>
<p>Now, back to Fahrenheit. It seems like a bizarre temperature scale, not clearly anchored to anything tangible and decidedly non-decimal. Celsius appears much more logical, right? That’s why Fahrenheit is only used in three countries, while Celsius is the global standard. But let’s consider this from an everyday perspective: do I really care about water’s boiling point when I’m checking the weather? I just want to know if it’s hot or cold! In Fahrenheit, I know that zero is bone-chillingly cold, and 100 is swelteringly hot. Everything else falls between these extremes. In Celsius? Zero degrees is an ambiguous, slushy mess — neither truly cold nor warm. And 100 degrees? That’s not even a real-world temperature for the weather. Sure, scientists in labs might care about when water boils (and why water, specifically?), but for the average person, isn’t a weather-centric scale more practical?</p>
<p>So, what’s the takeaway here? Living in a different country opens your mind to new perspectives on things you once thought were set in stone. It challenges your assumptions and broadens your horizons. In my view, it’s an excellent workout for your brain and your ability to reason.</p>
<p>P.S. Don’t try to conclude from this text that I’m “for” or “against” either system. I’ve grown to appreciate them both! 🙂</p>
]]></content:encoded>
    </item>
    <item>
      <title>Machine learning with matchboxes</title>
      <link>http://localhost:1313/texts/matchboxes/</link>
      <pubDate>Sun, 26 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/texts/matchboxes/</guid>
      <description>A journey from a childhood game to machine learning principles</description>
      <content:encoded><![CDATA[<p>I made my first machine learning project when I was 12. I used 24 matchboxes, 55 (give or take) cherry pits, gouache paint, paper, scissors, glue, and colored pencils. That was all I needed to start working with machine learning in the 1980s.</p>
<p>My dad gave me a book by Martin Gardner describing a simple game and a machine for playing it. He called the game Hexapawn because it used just six pawns on a 3x3 board.</p>
<h2 id="the-game-and-rules">The game and rules</h2>
<p>The rules are simple. Here is how Martin Gardner describes them (<a href="https://gwern.net/doc/reinforcement-learning/model-free/1991-gardner-ch8amatchboxgamelearningmachine.pdf">https://gwern.net/doc/reinforcement-learning/model-free/1991-gardner-ch8amatchboxgamelearningmachine.pdf</a> ):</p>
<p>Only two types of move are allowed:</p>
<p>(1) A pawn may advance straight forward one square to an empty square;
(2) a pawn may capture an enemy pawn by moving one square diagonally, left or right, to a square occupied by the enemy. The captured piece is removed from the board.</p>
<p>These are the same as pawn moves in chess, except that no double move, en passant capture, or promotion of pawns is permitted. The game is won in any of three ways:</p>
<ol>
<li>By advancing a pawn to the third row.</li>
<li>By capturing all enemy pieces.</li>
<li>By achieving a position in which the enemy cannot move.</li>
</ol>
<h2 id="the-project">The project</h2>
<p>Creating a board and finding the pieces to play was the easy part. After that, I had to create the machine itself. Martin Gardner called it HER: Hexapawn Educable Robot.</p>
<p>The whole game never lasts longer than six moves. I, the human, was playing white, and the robot was playing black. So I had to give it (HER?) instructions for each even move.</p>
<p>I split twenty-four matchboxes into three groups: for moves 2, 4, and 6. Each box had a picture describing the position and the possible moves for that position for black. Each box contained several colored cherry pits according to the number of possible moves.</p>
<p><img alt="Old boxes" loading="lazy" src="/texts/matchboxes/old_boxes.webp"></p>
<p>So, I had two boxes for the second move because there were two different positions after the first move by white (three if you count the symmetrical one). I had 11 boxes for the fourth move and another 11 boxes for the sixth move.</p>
<h2 id="time-to-play-and-learn">Time to play and learn</h2>
<p>Now, the game begins! You move your white pawn, take the matchbox with your current position, shake it, and pick one colored cherry pit from it (don’t look! Pick it randomly!). You make a move for the robot using the arrow of the cherry pit’s color and put it back in the box.</p>
<p>After six moves, either you or the robot wins.</p>
<p>Now begins the learning part. If the robot loses, you “punish” it by removing the colored pit responsible for the last move. For example, in box six above, if the last move for black was “green,” then black would lose. If that was the case, you remove the green pit from the box, leaving only the winning moves. If there is only one colored pit in the box, you “punish” the box responsible for the previous (fourth) move. That way, you ensure the robot never reaches the box with only one losing move.</p>
<p>Are the rules clear? Let’s start playing and teaching the machine!</p>
<p>The machine learns surprisingly fast. If you teach it correctly, it becomes invincible after 30–40 games. Don’t believe me? Try it!</p>
<h2 id="new-generation">New generation</h2>
<p>Forty years later, I found that book by Martin Gardner.</p>
<p><img alt="Martin Gardner&rsquo;s book cover" loading="lazy" src="/texts/matchboxes/martin_gardner_cover.webp"></p>
<p>(<a href="https://www.amazon.com/Colossal-Book-Short-Puzzles-Problems/dp/0393061140/">https://www.amazon.com/Colossal-Book-Short-Puzzles-Problems/dp/0393061140/</a> ) and rebuilt the machine with my son.</p>
<p>Of course, we used a computer to create the board and move diagrams. We found colored beads in a nearby store (no need to paint cherry pits!). But the fun was the same!</p>
<p>My son published the instructions with the ready-to-use printouts you can download, cut, and glue on your matchboxes: <a href="https://www.instructables.com/Matchbox-Mini-Chess-Learning-Machine/">https://www.instructables.com/Matchbox-Mini-Chess-Learning-Machine/</a></p>
<p>They look more polished now!</p>
<p><img alt="New boxes" loading="lazy" src="/texts/matchboxes/new_boxes.webp"></p>
<h2 id="machine-learning-ideas">Machine learning ideas</h2>
<p>I hear you saying, “I thought it was a serious article about Machine Learning, but you are talking about child games with pencils and colored beads!” Let’s see if we can find the basic machine learning ideas in this game.</p>
<h3 id="input-and-output">Input and output</h3>
<p>We begin with some input — the starting position. We must find the right output — the sequence of moves that will bring the machine to win the game. We must help the robot choose the right move at every possible position. Some moves are better than others, and we inform the robot about them using weights.</p>
<h3 id="weights">Weights</h3>
<p>In each position, we have several options for the next move. Depending on the game’s outcome, we can make certain move options more or less preferable for the next game (learning pass). Isn’t it similar to the weights we assign to certain neurons? Only in this case is it binary: you either leave the bead in the box (1) or remove it (0).</p>
<p>These days, we call it quantization, i.e., reducing the number of bits used by weights (e.g., from float32 to int8 and lower). In this case, each weight is exactly one bit, which tells us whether the bead is in the box or not.</p>
<h3 id="reinforcement-learning">Reinforcement learning</h3>
<p>Each time the machine gives you a wrong result, you adjust its weights. What is it, if not reinforcement learning? Environment, State, Agent, Action, Reward, right?</p>
<h3 id="backpropagation">Backpropagation</h3>
<p>Remember what you must do if only one bead is left in the box responsible for the last move? You can’t leave it empty, so you must apply the Reward (or, rather, the punishment) to the box responsible for the previous move. And so on and so forth. It looks like backpropagation, doesn’t it?</p>
<h2 id="going-further">Going further</h2>
<p>It’s pretty easy to play 30–40 games with the machine to make it invincible. Each game takes a few minutes, so we can achieve that result in less than an hour. But what if we could automate it? What if we could create a program to play the game and make two programs play against each other like they did with the Alpha Go program?</p>
<p>This sounds like a fun project that would be pretty easy to implement. But we are talking about ML and AI here, right? Why don’t we use AI to help us write this program?</p>
<p>I didn’t expect much when I entered the following prompt into ChatGPT.</p>
<blockquote>
<p>You are a Go programming expert. I will upload a file describing a simple chess-like game called Hexapawn. I want to write a program to implement this game. I must choose the data structures to store board positions and available (legal) moves in each position. Then, I have to implement the move and the whole game functions. Finally, I have to implement the learning procedure. Please help me develop this program. I have attached the PDF file with the game description.</p>
</blockquote>
<p>And I uploaded the 15-page PDF that I linked at the very beginning.</p>
<p>I’ll tell you what happened next in the following article. Sorry, I couldn’t resist using this phrase. Also, ChatGPT told me that this article’s length is ideal and that I should stop writing immediately.</p>
<h2 id="other-works">Other works</h2>
<p>I discovered that I&rsquo;m not alone in making parallels between this simple game an Machine Learning principles.
After a quick search I found many interesting articles about using this game in teaching.
Here is a short list of articles.</p>
<p><strong>Pomona College</strong> uses it in the <a href="http://www.cs.pomona.edu/~kim/CSC062S07/labs/Lab6/HexAPawn.pdf">computer science labs</a></p>
<p><strong>Proceedings of Machine Learning Research</strong> directly addresses the idea of using the Hexapawn game in teaching Machine Learning: <a href="https://proceedings.mlr.press/v170/marx22a/marx22a.pdf">Using Matchboxes to Teach the Basics of Machine Learning: an Analysis of (Possible) Misconceptions</a>.</p>
<p><strong>Computd</strong> calls it <a href="https://computd.nl/hexapawn-accessible-machine-learning/">&ldquo;The accessible physical machine learning model&rdquo;</a>.</p>
<p><strong>University of Wisconsin-Madison</strong> recommends Hexapawn as the <a href="https://education.mrsec.wisc.edu/hexapawn/">Introduction to Machine Learning</a> for students ages 11 and higher.</p>
<p><strong>Digital Business Development</strong> calls it <a href="https://dbd.au.dk/c/knowledge/tool-hexapawn-a-machine-learning-teaching-tool">a machine-learning teaching tool</a>.
They implemented a version of the game in <a href="https://bitbucket.org/aucbd/hexapawnts">JavaScript</a> but the game is not available online anymore.
Feel free to take the code and deploy it yourself.</p>
<p><strong>Mark Lawler</strong> wrote a story about <a href="https://mikesmathpage.wordpress.com/2017/09/03/intro-machine-learning-for-kids-via-martin-gardners-article-on-hexapawn/">showing this game to kids</a>.
He even recorded several videos of them playing the game and explaining it.</p>
]]></content:encoded>
    </item>
    <item>
      <title>SSH login monitor</title>
      <link>http://localhost:1313/projects/ssh_login_monitor/</link>
      <pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/ssh_login_monitor/</guid>
      <description>How a random chat at work brought me to writing an SSH login monitor program using LLM</description>
      <content:encoded><![CDATA[<p>I noticed that a friend of mine routinely logs into his lab servers via SSH using the <code>root</code> username and password.</p>
<p>&ldquo;Why do you do that?&rdquo; I asked.</p>
<p>&ldquo;What’s wrong with that?&rdquo; he said. &ldquo;I know, I know, it’s not a good security practice, but I’m used to it.
It’s just a lab server; what can go wrong? And also, all other ways are not that easy.&rdquo;</p>
<p>&ldquo;&lsquo;What can go wrong?&rsquo;&rdquo; I said, &ldquo;The famous last words!&rdquo;
&ldquo;I’m not going to tell you horror stories. I just think that what you consider &rsquo;the most convenient way&rsquo; is not
that convenient. There are other ways.&rdquo;</p>
<p>&ldquo;Yeah, I know, I know,&rdquo; he sighed. &ldquo;Create a normal user, give them <code>sudo</code> access, and all that.&rdquo;</p>
<p>&ldquo;Yes, that’s the <em>right way</em>. You are correct.
Even better, that user shouldn’t use a password too. Using SSH keys is much better.
But if you insist on going <em>directly</em> as <code>root</code>, you can do it with SSH keys too.
The good thing about this approach is that you can always check who’s logged in as <code>root</code> with which key.&rdquo;</p>
<p>&ldquo;Really? Can you show me?&rdquo; he asked.</p>
<p>Challenge accepted.</p>
<h2 id="create-users">Create users</h2>
<p>I used one of my Red Hat servers as a target host.
I decided to start a simple Fedora Linux VM for the client host and create three normal users on it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>[pavel@fedora ~]$ sudo useradd -m alice
</span></span><span style="display:flex;"><span>[pavel@fedora ~]$ sudo useradd -m bob
</span></span><span style="display:flex;"><span>[pavel@fedora ~]$ sudo useradd -m charlie
</span></span></code></pre></div><h2 id="create-ssh-keys">Create SSH keys</h2>
<p>On behalf of each user, I created their SSH keys.
I decided to use the Ed25519 algorithm as it’s shorter and more secure than the default RSA.
(To learn more about this, just google &rsquo;ed25519 vs. rsa&rsquo;.)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>[pavel@fedora ~] $ sudo su - alice
</span></span><span style="display:flex;"><span>[alice@fedora ~] $ ssh-keygen -t ed25519
</span></span><span style="display:flex;"><span>Generating public/private ed25519 key pair.
</span></span><span style="display:flex;"><span>Enter file in which to save the key (/home/alice/.ssh/id_ed25519):
</span></span><span style="display:flex;"><span>Created directory &#39;/home/alice/.ssh&#39;.
</span></span><span style="display:flex;"><span>Enter passphrase (empty for no passphrase):
</span></span><span style="display:flex;"><span>Enter same passphrase again:
</span></span><span style="display:flex;"><span>Your identification has been saved in /home/alice/.ssh/id_ed25519
</span></span><span style="display:flex;"><span>Your public key has been saved in /home/alice/.ssh/id_ed25519.pub
</span></span><span style="display:flex;"><span>The key fingerprint is:
</span></span><span style="display:flex;"><span>SHA256:5xuxPx8QnPv19/6IZ5frmQj1N0hRCP9J364ddE6avL8 alice@fedora
</span></span><span style="display:flex;"><span>The key&#39;s randomart image is:
</span></span><span style="display:flex;"><span>+--[ED25519 256]--+
</span></span><span style="display:flex;"><span>|           .. .. |
</span></span><span style="display:flex;"><span>|           ..o.  |
</span></span><span style="display:flex;"><span>|            +o . |
</span></span><span style="display:flex;"><span>|             o+ +|
</span></span><span style="display:flex;"><span>|        S o oo +*|
</span></span><span style="display:flex;"><span>|         o oo++Bo|
</span></span><span style="display:flex;"><span>|          +. .*+B|
</span></span><span style="display:flex;"><span>|           +o.+BX|
</span></span><span style="display:flex;"><span>|          . o**EX|
</span></span><span style="display:flex;"><span>+----[SHA256]-----+
</span></span><span style="display:flex;"><span>[alice@fedora ~]$ cat .ssh/id_ed25519.pub
</span></span><span style="display:flex;"><span>ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIG8Obx1FsUu1jlYDtzfEDHYSDjG82xE7ysxZVzhgpGC5 alice@fedora
</span></span><span style="display:flex;"><span>[alice@fedora ~] $ exit
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>[pavel@fedora ~] $ sudo su - bob
</span></span><span style="display:flex;"><span>[bob@fedora ~] $ ssh-keygen -t ed25519
</span></span><span style="display:flex;"><span>. . . . Same dialogue . . . .
</span></span><span style="display:flex;"><span>[bob@fedora ~] $ exit
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>[pavel@fedora ~] $ sudo su - charlie
</span></span><span style="display:flex;"><span>[charlie@fedora ~] $ ssh-keygen -t ed25519
</span></span><span style="display:flex;"><span>. . . . Same dialogue . . . .
</span></span><span style="display:flex;"><span>[charlie@fedora ~] $ exit
</span></span></code></pre></div><h2 id="create-fingerprints">Create fingerprints</h2>
<p>I wore my sysadmin hat and told my users: &ldquo;I trust you. I want to give you root access to my server.
But I need your public keys.&rdquo;</p>
<p>&ldquo;Great!&rdquo; Alice, Bob, and Charlie answered. &ldquo;How can we do it?&rdquo;</p>
<p>&ldquo;Login to your accounts.
Your public key is this file: <code>~/.ssh/id_ed25519.pub</code>.
It’s just a one-line text file.
You can include it in the mail body or attach it as a file.
Remember: don’t share your <em>private</em> key&ndash;the one without <code>.pub</code>&ndash;with anybody!
Keep it private!&rdquo;</p>
<p>My users started working, and in several minutes, I received an email from each of them containing the following information:</p>
<pre tabindex="0"><code class="language-none" data-lang="none">From: alice
To: sysadmin
Subject: my public key

Hi Sysadmin,

Here is my public key (I copied it from id_ed25519.pub, as you told us):

ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIG8Obx1FsUu1jlYDtzfEDHYSDjG82xE7ysxZVzhgpGC5 alice@fedora

I hope this works.

Thanks,
Alice
</code></pre><h2 id="add-the-public-keys-to-the-host">Add the public keys to the host</h2>
<p>The easiest way to give access to somebody to any account, including <code>root</code>, is to add that user’s public key to the file <code>.ssh/authorized_keys</code> in that account’s home directory.
This is exactly what I did for the <code>root</code> user on my lab server.
I opened (with Vim, of course) the file <code>/root/.ssh/authorized_keys</code> and entered these three entries (the public keys from my users):</p>
<pre tabindex="0"><code class="language-none" data-lang="none">ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIG8Obx1FsUu1jlYDtzfEDHYSDjG82xE7ysxZVzhgpGC5 alice@fedora
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJgclT4eQ5RlYabZfkdjFV5wGrroXxmd5n2X7okmiaN8 bob@fedora
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJWcjljox2NKwDFllZ5KQc4LSVrBEKoaOE/t/up1XbyD charlie@fedora
</code></pre><p>Now the system is ready for a test.</p>
<h2 id="test-access">Test access</h2>
<p>I went to my users and told them: &ldquo;The system is ready. Feel free to test your access!
The first time you login, the system will ask you if you trust the host you are logging in.
Answer <code>yes</code>. The host will be added to the list of known hosts&ndash;check it later in <code>~/.ssh/known_hosts</code>&ndash;
and next time, you won’t be asked for confirmation.&rdquo;</p>
<p>Alice, Bob, and Charlie opened their terminals on the Fedora machine and tried:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>[bob@fedora ~] $ ssh -l root 192.168.1.234
</span></span><span style="display:flex;"><span>The authenticity of host &#39;192.168.1.234 (192.168.1.234)&#39; can&#39;t be established.
</span></span><span style="display:flex;"><span>ED25519 key fingerprint is SHA256:mhS0bPdGrEIwwMKJdKxpkxLdtYKNp0+FSgwqybeugd8.
</span></span><span style="display:flex;"><span>This key is not known by any other names
</span></span><span style="display:flex;"><span>Are you sure you want to continue connecting (yes/no/[fingerprint])? *(Bob typed &#39;yes&#39;)*
</span></span><span style="display:flex;"><span>Warning: Permanently added &#39;192.168.1.234&#39; (ED25519) to the list of known hosts.
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>Last login: Wed Apr 26 09:06:21 2023 from 192.168.1.24
</span></span><span style="display:flex;"><span>[root@rhel-lab ~]#
</span></span></code></pre></div><p>&ldquo;Wow! That was easy!&rdquo; Bob said. &ldquo;Look, no password!&rdquo;</p>
<p>&ldquo;I told you!&rdquo; I said.
&ldquo;But keep in mind: each of you comes to the server with your own key.
That means the server’s admin will always know who logged in as root: Alice, Bob, or Charlie.
So please be considerate when working as root on this host.&rdquo;</p>
<p>I said this to my users but wasn’t ready yet to watch their logins.
It was time to prepare.</p>
<h2 id="check-the-logs">Check the logs</h2>
<p>&ldquo;They just logged in and out recently,&rdquo; I thought. &ldquo;It should be at the end of the log.&rdquo;</p>
<p>In Red Hat Enterprise Linux, the log file where all security-related events are stored is called <code>/var/log/secure.</code>
Let’s check its last 30 lines.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span># tail -30  /var/log/secure
</span></span><span style="display:flex;"><span>Apr 27 10:21:19 deep-rh sshd[1337250]: Accepted publickey for root from 192.168.1.24 port 49090 ssh2: ED25519 SHA256:5xuxPx8QnPv19/6IZ5frmQj1N0hRCP9J364ddE6avL8
</span></span><span style="display:flex;"><span>Apr 27 10:21:19 deep-rh systemd[1337257]: pam_unix(systemd-user:session): session opened for user root by (uid=0)
</span></span><span style="display:flex;"><span>Apr 27 10:21:19 deep-rh sshd[1337250]: pam_unix(sshd:session): session opened for user root by (uid=0)
</span></span><span style="display:flex;"><span>Apr 27 10:21:22 deep-rh sshd[1337282]: Received disconnect from 192.168.1.24 port 49090:11: disconnected by user
</span></span><span style="display:flex;"><span>Apr 27 10:21:22 deep-rh sshd[1337282]: Disconnected from user root 192.168.1.24 port 49090
</span></span><span style="display:flex;"><span>Apr 27 10:21:22 deep-rh sshd[1337250]: pam_unix(sshd:session): session closed for user root
</span></span><span style="display:flex;"><span>Apr 27 10:21:32 deep-rh systemd[1337261]: pam_unix(systemd-user:session): session closed for user root
</span></span><span style="display:flex;"><span>Apr 27 10:21:34 deep-rh sshd[1337458]: Accepted publickey for root from 192.168.1.24 port 41254 ssh2: ED25519 SHA256:is6l6bRqCCBVKunT+zVGHoUF0A06p8lt/04EoRbyCUY
</span></span><span style="display:flex;"><span>Apr 27 10:21:34 deep-rh systemd[1337467]: pam_unix(systemd-user:session): session opened for user root by (uid=0)
</span></span><span style="display:flex;"><span>Apr 27 10:21:34 deep-rh sshd[1337458]: pam_unix(sshd:session): session opened for user root by (uid=0)
</span></span><span style="display:flex;"><span>Apr 27 10:21:37 deep-rh sshd[1337493]: Received disconnect from 192.168.1.24 port 41254:11: disconnected by user
</span></span><span style="display:flex;"><span>Apr 27 10:21:37 deep-rh sshd[1337493]: Disconnected from user root 192.168.1.24 port 41254
</span></span><span style="display:flex;"><span>Apr 27 10:21:37 deep-rh sshd[1337458]: pam_unix(sshd:session): session closed for user root
</span></span><span style="display:flex;"><span>Apr 27 10:21:47 deep-rh systemd[1337472]: pam_unix(systemd-user:session): session closed for user root
</span></span><span style="display:flex;"><span>Apr 27 10:21:55 deep-rh sshd[1337680]: Accepted publickey for root from 192.168.1.24 port 42552 ssh2: ED25519 SHA256:QgAov0UZI25hWxnbLiHa00j64/zD1m80UMsSIZtxr2s
</span></span><span style="display:flex;"><span>Apr 27 10:21:55 deep-rh systemd[1337706]: pam_unix(systemd-user:session): session opened for user root by (uid=0)
</span></span><span style="display:flex;"><span>Apr 27 10:21:55 deep-rh sshd[1337680]: pam_unix(sshd:session): session opened for user root by (uid=0)
</span></span><span style="display:flex;"><span>Apr 27 10:21:58 deep-rh sshd[1337730]: Received disconnect from 192.168.1.24 port 42552:11: disconnected by user
</span></span><span style="display:flex;"><span>Apr 27 10:21:58 deep-rh sshd[1337730]: Disconnected from user root 192.168.1.24 port 42552
</span></span><span style="display:flex;"><span>Apr 27 10:21:58 deep-rh sshd[1337680]: pam_unix(sshd:session): session closed for user root
</span></span><span style="display:flex;"><span>Apr 27 10:22:08 deep-rh systemd[1337710]: pam_unix(systemd-user:session): session closed for user root
</span></span></code></pre></div><p>&ldquo;Good,&rdquo; I thought. &ldquo;I can see their logins and logouts. I can see the IPs from which they logged in.
But how can I figure out who logged in and when?&rdquo;</p>
<p>After a bit of googling, I found out that the string that goes after <code>ED25519 SHA256:</code> is a fingerprint of the user’s public key.
&ldquo;I just have to connect the fingerprints with the public keys,&rdquo; I thought.</p>
<h2 id="create-a-fingerprint-database">Create a fingerprint database</h2>
<p>Fingerprints are only useful if you have collected a good database of them.
This is what I did after receiving the emails from my users.</p>
<p>On the lab host (<code>rhel-lab</code>) I saved the users&rsquo; public keys in a separate directory under <code>/root</code>.
Of course, I made it readable only by root.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span># mkdir ~/ssh-keys
</span></span><span style="display:flex;"><span># chmod <span style="color:#ae81ff">0700</span> ~/ssh-keys
</span></span><span style="display:flex;"><span># cd ~/ssh-keys
</span></span></code></pre></div><p>I copied the users&rsquo; public keys that they sent me here and added the owner’s name to each file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span># echo <span style="color:#e6db74">&#34;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIG8Obx1FsUu1jlYDtzfEDHYSDjG82xE7ysxZVzhgpGC5 alice@fedora&#34;</span> &gt; alice_id_ed25519.pub
</span></span><span style="display:flex;"><span># echo <span style="color:#e6db74">&#34;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJgclT4eQ5RlYabZfkdjFV5wGrroXxmd5n2X7okmiaN8 bob@fedora&#34;</span> &gt; bob_id_ed25519.pub
</span></span><span style="display:flex;"><span># echo <span style="color:#e6db74">&#34;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJWcjljox2NKwDFllZ5KQc4LSVrBEKoaOE/t/up1XbyD charlie@fedora&#34;</span> &gt; charlie_id_ed25519.pub
</span></span><span style="display:flex;"><span># ls -l *pub
</span></span><span style="display:flex;"><span>-rw-r--r--. 1 root root 94 Apr 27 09:53 alice_id_ed25519.pub
</span></span><span style="display:flex;"><span>-rw-r--r--. 1 root root 92 Apr 27 09:54 bob_id_ed25519.pub
</span></span><span style="display:flex;"><span>-rw-r--r--. 1 root root 96 Apr 27 09:54 charlie_id_ed25519.pub
</span></span></code></pre></div><p>Then I ran the following command against each public key file to create its fingerprint.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span># ssh-keygen -lf alice_id_ed25519.pub
</span></span><span style="display:flex;"><span>256 SHA256:5xuxPx8QnPv19/6IZ5frmQj1N0hRCP9J364ddE6avL8 alice@fedora (ED25519)
</span></span><span style="display:flex;"><span># ssh-keygen -lf bob_id_ed25519.pub
</span></span><span style="display:flex;"><span>256 SHA256:is6l6bRqCCBVKunT+zVGHoUF0A06p8lt/04EoRbyCUY bob@fedora (ED25519)
</span></span><span style="display:flex;"><span># ssh-keygen -lf charlie_id_ed25519.pub
</span></span><span style="display:flex;"><span>256 SHA256:QgAov0UZI25hWxnbLiHa00j64/zD1m80UMsSIZtxr2s charlie@fedora (ED25519)
</span></span></code></pre></div><p>In the same directory, I opened a file called <code>users.csv</code> and added three records in the form of <code>username,fingerprint</code>, like this:</p>
<p><strong>users.csv</strong></p>
<pre tabindex="0"><code class="language-none" data-lang="none">alice,5xuxPx8QnPv19/6IZ5frmQj1N0hRCP9J364ddE6avL8
bob,is6l6bRqCCBVKunT+zVGHoUF0A06p8lt/04EoRbyCUY
charlie,QgAov0UZI25hWxnbLiHa00j64/zD1m80UMsSIZtxr2s
</code></pre><p>Now I needed a program to scan the <code>/var/log/secure</code> file, find login and logout messages,
parse them to find the fingerprint, and look up the user based on their fingerprint in the database.</p>
<h2 id="create-a-log-monitoring-application">Create a log-monitoring application</h2>
<p>I started learning Go recently, so for each new idea I try to use Go to practice.
So this problem looked like a good exercise.</p>
<p>The program’s logic is pretty simple:</p>
<ul>
<li>Scan the log file and create a list of login/logout events.</li>
<li>For each login event, find the user based on their fingerprint.</li>
<li>Create a list of sessions and add login events to it.</li>
<li>For each logout event, find the corresponding login event based on the source IP and the port and update the end time of the session.</li>
<li>Output all sessions with user names, source IPs, start/end times, and duration.</li>
</ul>
<p>The most challenging part was to parse the log file and collect all necessary fields.
That’s why the regular expressions might look scary.</p>
<p>I created a simple Go program consisting of a single <code>main.go</code> file and tested it on
a short fragment of <code>/var/log/secure</code> file.
It printed out this:</p>
<pre tabindex="0"><code class="language-none" data-lang="none"># go run main.go
alice   192.168.1.24    2023-04-27 10:21:19     2023-04-27 10:21:22     3s
bob     192.168.1.24    2023-04-27 10:21:34     2023-04-27 10:21:37     3s
charlie 192.168.1.24    2023-04-27 10:21:55     2023-04-27 10:21:58     3s
</code></pre><h2 id="use-ai-to-improve-the-application">Use AI to improve the application</h2>
<p>The first version of this app was a simple <code>main.go</code> file with hard-coded file names.
I was playing around and needed a simple demo.
My first improvement was adding the command-line arguments.
I added the <code>pflag</code> package (<a href="https://pkg.go.dev/github.com/spf13/pflag">https://pkg.go.dev/github.com/spf13/pflag</a>) and turned on Codeium (<a href="https://codeium.com/">https://codeium.com/</a>) in my VS Code.
And here, AI began to help me.</p>
<p>AI coding assistants are very impressive, no doubt.
But it’s one thing when you see it helping <em>somebody</em> in the video or you’re trying it yourself with some <em>example</em> programs.
And it’s another thing when you write something yourself, you work on your own project, and it starts really helping <em>you</em>.
Then you can clearly see how much time you saved by not typing a lot of things (just press [Tab] to accept!),
by not looking around your own code (what should be included in this <code>struct</code>, I forgot?), and by not googling function library definitions and arguments.
AI remembers all this for you.</p>
<p>Back to my code. I just started typing <code>userDB := flag.</code> and Codeium already knew that it should be <code>StringP</code> and the argument
should be named <code>users</code> (short form is <code>u</code>) and the reasonable default should be <code>users.csv</code>.
I didn’t argue and accepted.
The next argument was the same: I added the <code>log</code> argument almost without typing anything.</p>
<p>So far, so good. Let’s try another tool.
I opened ChatGPT and asked:</p>
<p><strong>Me</strong>: Act as a Go programming mentor. I will give you a program I wrote. Please suggest possible tests to add to this program.
Here is my program:</p>
<p>&hellip;and I pasted my simple <code>main.go</code> in the chat window.</p>
<p>In the answer it suggested several cases that I have to test with each function: valid input,
empty input, invalid input, duplicate fingerprints, etc.
At the end, ChatGPT gave me an example of how it can be done and added:</p>
<p><strong>AI</strong>: You can follow a similar pattern to write tests for the other functions as well.</p>
<p>Wow, it acted like a real mentor! It didn’t write the code <em>for me</em>, but it helped me to move in the right direction.</p>
<p>I wanted to write my tests the right way and played a role of a good student:</p>
<p><strong>Me</strong>: I read an article that suggested keeping the <code>main.go</code> file small and let the main function only call the application function.
They suggested having other functions in separate files and argued that it helps in testing.
Can you help me to apply these suggestions to my code?</p>
<p>&ldquo;Sure!&rdquo; the AI answered and suggested a good plan of moving all my functions to a
separate <code>pkg/sshloginmonitor</code> directory and creating files <code>user.go</code>, <code>session.go</code>, and <code>util.go</code>.</p>
<p>I followed the suggestion, and our discussion continued.</p>
<p><strong>Me</strong>: My program should log a fatal error under certain conditions. How should I test that?</p>
<p>In the answer it explained that it’s possible but I should keep in mind that the call to <code>log.Fatal()</code> will terminate my test.</p>
<p><strong>Me</strong>: Right! I shouldn’t call <code>log.Fatal()</code> from the function. I should return an error instead. How should I check the if the error is returned?</p>
<p>The AI gave me the full explanation with an example of how it should be done.</p>
<p><strong>Me</strong>: How should I specify the expected error in the lists of tests?</p>
<p>Another great example with a slice of test cases showing how to specify the expected error.</p>
<p><strong>Me</strong>: How should I test reading from a file? Can it be done by reading from a string constant?</p>
<p>Another great suggestion from AI: you probably should pass <code>io.Reader</code> to your function, not a file name.
That way, it will be much easier to test.
Accepted; I re-wrote my functions to use <code>io.Reader</code> instead of file names.</p>
<p>And so on, and so forth. Step by step, with the help of ChatGPT and Codeium, my little program
got the tests it needed, docstrings for functions, and test cases for different conditions.
In other words, in just a couple of hours, it looked much more professional.</p>
<p>I don’t know if AI can fully replace programmers.
But I’m sure it can help us write better code.
Just don’t be afraid and ask questions.</p>
<p>Find the code in this repo: <a href="https://github.com/pavelanni/ssh-login-monitor">https://github.com/pavelanni/ssh-login-monitor</a></p>
<hr>
<p>&ldquo;Wait,&rdquo; I thought. &ldquo;What if I give the AI the full description of my problem?
Will it be able to write it from scratch?&rdquo;</p>
<p>To be honest, I was a bit skeptical. Well, ChatGPT has impressed me already helping with my code here and there.
But to solve this problem from scratch, just from the problem description?
Probably not. But let’s give it a try.</p>
<h2 id="chatgpt-solves-the-problem">ChatGPT solves the problem</h2>
<p>I opened the ChatGPT window and typed the problem description.</p>
<p><img alt="The problem description" loading="lazy" src="/projects/ssh_login_monitor/problem.png"></p>
<p>I added the log (here is just a fragment).</p>
<p><img alt="Log fragment" loading="lazy" src="/projects/ssh_login_monitor/log.png"></p>
<p>And finally I added the <code>authorized_keys</code> file.</p>
<p><img alt="Authorized keys" loading="lazy" src="/projects/ssh_login_monitor/keys.png"></p>
<p>Let’s see what it can do with such a problem!</p>
<p>I didn’t wait for too long.
Almost immediately, ChatGPT started printing.
(The GPT-4 version prints a bit slower that GPT-3.5 and that creates an effect of &ldquo;thinking&rdquo;.
Also, it reminds me those old teletype machines used with <em>really</em> old computers.)</p>
<p><img alt="Fingerprint calculation" loading="lazy" src="/projects/ssh_login_monitor/fingerprint_calc.png"></p>
<p>Wait, what?? It’s just a language model!
How could it calculate the fingerprints??</p>
<p>But I didn’t have time to answer my own question because ChatGPT continued printing.</p>
<p><img alt="Login events" loading="lazy" src="/projects/ssh_login_monitor/login_events.png"></p>
<p>Well, it found the login events based on the string I gave it (him? her?) and connected the fingerprints to those it just calculated.
Impressive. It even found the timestamps and correctly presented them as timestamps.
Good job, but that’s easy.</p>
<p>Let’s continue and ask about logout events.</p>
<p><img alt="Logout events problem" loading="lazy" src="/projects/ssh_login_monitor/logout_events_problem.png"></p>
<p>Again, almost without a pause:</p>
<p><img alt="Logout events" loading="lazy" src="/projects/ssh_login_monitor/logout_events.png"></p>
<p>Good logic, great explanation! Find the ports and connect them to the login events.
That means it remembers the login events from the previous task somehow!
Mind blowing&hellip; But let’s continue.</p>
<p>If it remembers login and logout events, it should be able to calculate session durations.
Or not? Again, it’s just a language model, it should not know how to do arithmetics.
Let’s ask and see&hellip;</p>
<p><img alt="Session durations" loading="lazy" src="/projects/ssh_login_monitor/session_durations.png"></p>
<p>Wow! It even explained how it did the calculations! &ldquo;Show your work,&rdquo; as we were told in school.</p>
<p>I found myself sitting with a dropped jaw a few seconds later.
(No, it’s not just a figure of speech. Literally.)</p>
<p>For a few minutes I couldn’t collect my thoughts.
Yes, it’s a language model. Yes, it can find certain phrases and connect them together because
it has seen those phrases and words many times during training.
I understand that.</p>
<p>But how can it find numbers (like port numbers) and connect them together?
And how can it calculate?
Not only something simple like &ldquo;37 - 34&rdquo;, but an <em>SSH public key fingerprint</em>??
I can’t imagine that the model was trained on all possible public keys and their fingerprints, can you?</p>
<p>After several minutes of shock I got another great idea.
I had to close the loop.</p>
<p><img alt="Write a program" loading="lazy" src="/projects/ssh_login_monitor/write_program.png"></p>
<p>It wrote a piece of Go code, gave me instructions on how to run it, and how to pass
the input files to it.</p>
<p>Needless to say that I copied the code into my editor and ran it!</p>
<pre tabindex="0"><code class="language-none" data-lang="none">$ go run main.go ../test/secure.log ../test/authorized_keys
Login: alice - 0000-04-27 10:21:19 - 192.168.1.24:49090
Logout: alice - 0000-04-27 10:21:22 - 192.168.1.24:49090
Login: bob - 0000-04-27 10:21:34 - 192.168.1.24:41254
Logout: bob - 0000-04-27 10:21:37 - 192.168.1.24:41254
Login: charlie - 0000-04-27 10:21:55 - 192.168.1.24:42552
Logout: charlie - 0000-04-27 10:21:58 - 192.168.1.24:42552
</code></pre><p>One minor thing &ndash; it didn’t get the current year.
But it wasn’t in the log, so this is fine.
Now I’m pretty sure I could tell it to use the current year if it’s missing and it would do it perfectly.
No doubt.</p>
<p>The code written by ChatGPT is here: <a href="https://github.com/pavelanni/ssh-login-monitor/tree/main/chatgpt-version">https://github.com/pavelanni/ssh-login-monitor/tree/main/chatgpt-version</a></p>
]]></content:encoded>
    </item>
  </channel>
</rss>
